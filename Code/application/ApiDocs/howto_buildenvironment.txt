/** \page howto_buildenvironment Setting up a build environment
Files:
 - \ref Tutorial/ModuleManager.cpp "Tutorial/ModuleManager.cpp"
 - \ref Tutorial/Tutorial.vcproj "Tutorial/Tutorial.vcproj"
 - \ref Tutorial/SConscript

The %Opticks SDK provides a few files to help you set up a plug-in build environment.

The Dependencies directory contains a utility to automatically download %Opticks dependencies.
See the README.windows and README.solaris files for information on using this utility.

Plug-ins are distributed in dynamic modules (.dll files on Windows and .so files on Solaris) which can contain multiple plug-ins.
In addition to plug-in source files, each module requires a ModuleManager.cpp file which acts as a factory for the plug-ins in the module.
The %Opticks SDK has a template ModuleManager.cpp in the Src directory.
The template file has inline comments describing what you need to do.
Below is the ModuleManager.cpp file for the tutorial.
\include Tutorial/ModuleManager.cpp

\section build_files Build Files
The %Opticks SDK also provides utilities for building your modules.
\subsection build_files_windows Windows
The easiest way to build a module on Windows is to create a directory in the %Opticks SDK Application/PlugIns/src directory.
Create a Visual Studio 2005 project file for your plug-in.
The %Opticks SDK contains a number of Visual Studio property sheets in the Application/CompileSettings directory.
They set various options required to build a plug-in.
Some property sheets are required, others add optional functionality.
Look in the tutorial project file and the various example plug-in project files for examples of which property sheets should be used.
Some sheets have child sheets for specific configurations in which case, the child sheets should be used.
Below is a list of common property sheets for the debug 32-bit configuration.
Other configurations need to make appropriate substitutions.
 - Macros
 - Xerces-Debug
 - boost
 - AllCommonSettings-Debug-32bit
 - PlugInCommonSettings
 - 32bitSettings

You should remove most property overrides in the project files.
See the example project files for more details.
A common way to create a new project file is to copy an existing one.
If you do this, there are a few things in the project file which need to be edited with a text editor before adding it to a Visual Studio solution.
As an example, I'll copy the tutorial project file to MyModule.vcproj.
I open the new project file in a text editor such as \c notepad.exe and change the following lines.
\dontinclude Tutorial/Tutorial.vcproj
\skipline Name
This should be changed to the name of your project as it will appear in the Visual Studio solution explorer.
\skipline ProjectGUID
This GUID must be changed to a unique GUID.
The "Create GUID" tool in Visual Studio can be used.
\skipline RootNamespace
This is generally the same as your project name and is used by Visual Studio when creating certain directories.
\skipline TypeLibraryName
Change the base name to match your project file base name.
This line occurs multiple times in a project file, once for each configuration.
\skip <Files>
\until </Files>
You can remove the %File entries for the old project's files now or you can remove them after you add the project to the solution.

Once you've made these changes, save the project file and add it to a Visual Studio solution.
Make changes to the list of property sheets in the Property Manager inside Visual Studio.
Add files for your module including a ModuleManager.cpp and build your plug-ins.

There are a few environment variables which are required for this build system to function.
 - OPTICKSDEPENDENCIES is an absolute path to the dependencies files.
 - OPTICKS_CODE_DIR is an absolute path to the %Opticks SDK folder.
These should be set before you start Visual Studio or the build system will not be able to locate certain important files.
Your plug-in will be build in the SDK's Build folder in a sub-folder defined by your platform configuration.
When you run %Opticks, you should either change the plug-in path to point to the PlugIns directory in the appropriate folder or copy your module to the main PlugIns directory in your %Opticks installation.

\subsection build_files_solaris Solaris
The Solaris build system is based on a tool called SCons.
You should create a directory in the SDK's Application/PlugIns/src directory.
You don't need to create a plug-in specific build file as a default will be created the first time you build your module.
You can build your module by changing your working directory to the Application/PlugIns/src directory and running scons.
The -h and -H options will print help messages for the scons tool.

The scons equivalent of property sheets are the .py files in the Application/CompileSettings directory.
If your plug-in requires a library not included in the default set such as libtiff, you can edit the SConscript file that is created in your module's directory.
This shows how to include the libtiff tool.
\dontinclude Tutorial/SConscript
\skipline Import
Change this line and add the following lines.
\code
Import('env extra_obj build_dir TOOLPATH')
env = env.Copy()
env.Tool("libtiff",toolpath=[TOOLPATH])
\endcode
The tool name is the name of the .py file in Application/CompileSettings.

This scons build system uses the same environment variables as the Visual Studio build system.

\example Tutorial/ModuleManager.cpp
The tutorial's plug-in module definition and factory file.
\example Tutorial/Tutorial.vcproj
The tutorial's Visual Studio project file.
\example Tutorial/SConscript
The tutorial's scons build file.
 */