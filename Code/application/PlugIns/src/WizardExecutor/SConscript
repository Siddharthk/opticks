import glob

####
# import the environment
####
Import('env build_dir TOOLPATH')
env = env.Clone()
env.Append(CPPDEFINES=["APPLICATION_XERCES"],CPPPATH=["$COREDIR/Wizard","#/WizardItems"],LIBS=["Wizard"])

####
# build sources
####
srcs = map(lambda x,bd=build_dir: '%s/%s' % (bd,x), glob.glob("*.cpp"))
objs = env.SharedObject(srcs)
wizard_static_lib = env.File("%s/libWizard.a" % env["LIBDIR"])
class SharedObjectProxy:
   def __init__(self):
      self.shared = 1
wizard_static_lib.attributes = SharedObjectProxy()
wizard_extras = [wizard_static_lib]

####
# build the plug-in library and set up an alias to wase building it later
####
lib = env.SharedLibrary('%s/WizardExecutor' % build_dir,objs+wizard_extras)
libInstall = env.Install(env["PLUGINDIR"], lib)
env.Alias('WizardExecutor', libInstall)

####
# return the plug-in library
####
Return("libInstall")
